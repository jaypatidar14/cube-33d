/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tween.js";
exports.ids = ["vendor-chunks/tween.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/tween.js/src/Tween.js":
/*!********************************************!*\
  !*** ./node_modules/tween.js/src/Tween.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */ var TWEEN = TWEEN || function() {\n    var _tweens = [];\n    return {\n        getAll: function() {\n            return _tweens;\n        },\n        removeAll: function() {\n            _tweens = [];\n        },\n        add: function(tween) {\n            _tweens.push(tween);\n        },\n        remove: function(tween) {\n            var i = _tweens.indexOf(tween);\n            if (i !== -1) {\n                _tweens.splice(i, 1);\n            }\n        },\n        update: function(time, preserve) {\n            if (_tweens.length === 0) {\n                return false;\n            }\n            var i = 0;\n            time = time !== undefined ? time : TWEEN.now();\n            while(i < _tweens.length){\n                if (_tweens[i].update(time) || preserve) {\n                    i++;\n                } else {\n                    _tweens.splice(i, 1);\n                }\n            }\n            return true;\n        }\n    };\n}();\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\nif (typeof window === \"undefined\" && typeof process !== \"undefined\") {\n    TWEEN.now = function() {\n        var time = process.hrtime();\n        // Convert [seconds, nanoseconds] to milliseconds.\n        return time[0] * 1000 + time[1] / 1000000;\n    };\n} else if (typeof window !== \"undefined\" && window.performance !== undefined && window.performance.now !== undefined) {\n    // This must be bound, because directly assigning this function\n    // leads to an invocation exception in Chrome.\n    TWEEN.now = window.performance.now.bind(window.performance);\n} else if (Date.now !== undefined) {\n    TWEEN.now = Date.now;\n} else {\n    TWEEN.now = function() {\n        return new Date().getTime();\n    };\n}\nTWEEN.Tween = function(object) {\n    var _object = object;\n    var _valuesStart = {};\n    var _valuesEnd = {};\n    var _valuesStartRepeat = {};\n    var _duration = 1000;\n    var _repeat = 0;\n    var _repeatDelayTime;\n    var _yoyo = false;\n    var _isPlaying = false;\n    var _reversed = false;\n    var _delayTime = 0;\n    var _startTime = null;\n    var _easingFunction = TWEEN.Easing.Linear.None;\n    var _interpolationFunction = TWEEN.Interpolation.Linear;\n    var _chainedTweens = [];\n    var _onStartCallback = null;\n    var _onStartCallbackFired = false;\n    var _onUpdateCallback = null;\n    var _onCompleteCallback = null;\n    var _onStopCallback = null;\n    this.to = function(properties, duration) {\n        _valuesEnd = properties;\n        if (duration !== undefined) {\n            _duration = duration;\n        }\n        return this;\n    };\n    this.start = function(time) {\n        TWEEN.add(this);\n        _isPlaying = true;\n        _onStartCallbackFired = false;\n        _startTime = time !== undefined ? time : TWEEN.now();\n        _startTime += _delayTime;\n        for(var property in _valuesEnd){\n            // Check if an Array was provided as property value\n            if (_valuesEnd[property] instanceof Array) {\n                if (_valuesEnd[property].length === 0) {\n                    continue;\n                }\n                // Create a local copy of the Array with the start value at the front\n                _valuesEnd[property] = [\n                    _object[property]\n                ].concat(_valuesEnd[property]);\n            }\n            // If `to()` specifies a property that doesn't exist in the source object,\n            // we should not set that property in the object\n            if (_object[property] === undefined) {\n                continue;\n            }\n            // Save the starting value.\n            _valuesStart[property] = _object[property];\n            if (_valuesStart[property] instanceof Array === false) {\n                _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n            }\n            _valuesStartRepeat[property] = _valuesStart[property] || 0;\n        }\n        return this;\n    };\n    this.stop = function() {\n        if (!_isPlaying) {\n            return this;\n        }\n        TWEEN.remove(this);\n        _isPlaying = false;\n        if (_onStopCallback !== null) {\n            _onStopCallback.call(_object, _object);\n        }\n        this.stopChainedTweens();\n        return this;\n    };\n    this.end = function() {\n        this.update(_startTime + _duration);\n        return this;\n    };\n    this.stopChainedTweens = function() {\n        for(var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++){\n            _chainedTweens[i].stop();\n        }\n    };\n    this.delay = function(amount) {\n        _delayTime = amount;\n        return this;\n    };\n    this.repeat = function(times) {\n        _repeat = times;\n        return this;\n    };\n    this.repeatDelay = function(amount) {\n        _repeatDelayTime = amount;\n        return this;\n    };\n    this.yoyo = function(yoyo) {\n        _yoyo = yoyo;\n        return this;\n    };\n    this.easing = function(easing) {\n        _easingFunction = easing;\n        return this;\n    };\n    this.interpolation = function(interpolation) {\n        _interpolationFunction = interpolation;\n        return this;\n    };\n    this.chain = function() {\n        _chainedTweens = arguments;\n        return this;\n    };\n    this.onStart = function(callback) {\n        _onStartCallback = callback;\n        return this;\n    };\n    this.onUpdate = function(callback) {\n        _onUpdateCallback = callback;\n        return this;\n    };\n    this.onComplete = function(callback) {\n        _onCompleteCallback = callback;\n        return this;\n    };\n    this.onStop = function(callback) {\n        _onStopCallback = callback;\n        return this;\n    };\n    this.update = function(time) {\n        var property;\n        var elapsed;\n        var value;\n        if (time < _startTime) {\n            return true;\n        }\n        if (_onStartCallbackFired === false) {\n            if (_onStartCallback !== null) {\n                _onStartCallback.call(_object, _object);\n            }\n            _onStartCallbackFired = true;\n        }\n        elapsed = (time - _startTime) / _duration;\n        elapsed = elapsed > 1 ? 1 : elapsed;\n        value = _easingFunction(elapsed);\n        for(property in _valuesEnd){\n            // Don't update properties that do not exist in the source object\n            if (_valuesStart[property] === undefined) {\n                continue;\n            }\n            var start = _valuesStart[property] || 0;\n            var end = _valuesEnd[property];\n            if (end instanceof Array) {\n                _object[property] = _interpolationFunction(end, value);\n            } else {\n                // Parses relative end values with start as base (e.g.: +10, -3)\n                if (typeof end === \"string\") {\n                    if (end.charAt(0) === \"+\" || end.charAt(0) === \"-\") {\n                        end = start + parseFloat(end);\n                    } else {\n                        end = parseFloat(end);\n                    }\n                }\n                // Protect against non numeric properties.\n                if (typeof end === \"number\") {\n                    _object[property] = start + (end - start) * value;\n                }\n            }\n        }\n        if (_onUpdateCallback !== null) {\n            _onUpdateCallback.call(_object, value);\n        }\n        if (elapsed === 1) {\n            if (_repeat > 0) {\n                if (isFinite(_repeat)) {\n                    _repeat--;\n                }\n                // Reassign starting values, restart by making startTime = now\n                for(property in _valuesStartRepeat){\n                    if (typeof _valuesEnd[property] === \"string\") {\n                        _valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property]);\n                    }\n                    if (_yoyo) {\n                        var tmp = _valuesStartRepeat[property];\n                        _valuesStartRepeat[property] = _valuesEnd[property];\n                        _valuesEnd[property] = tmp;\n                    }\n                    _valuesStart[property] = _valuesStartRepeat[property];\n                }\n                if (_yoyo) {\n                    _reversed = !_reversed;\n                }\n                if (_repeatDelayTime !== undefined) {\n                    _startTime = time + _repeatDelayTime;\n                } else {\n                    _startTime = time + _delayTime;\n                }\n                return true;\n            } else {\n                if (_onCompleteCallback !== null) {\n                    _onCompleteCallback.call(_object, _object);\n                }\n                for(var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++){\n                    // Make the chained tweens start exactly at the time they should,\n                    // even if the `update()` method was called way past the duration of the tween\n                    _chainedTweens[i].start(_startTime + _duration);\n                }\n                return false;\n            }\n        }\n        return true;\n    };\n};\nTWEEN.Easing = {\n    Linear: {\n        None: function(k) {\n            return k;\n        }\n    },\n    Quadratic: {\n        In: function(k) {\n            return k * k;\n        },\n        Out: function(k) {\n            return k * (2 - k);\n        },\n        InOut: function(k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k;\n            }\n            return -0.5 * (--k * (k - 2) - 1);\n        }\n    },\n    Cubic: {\n        In: function(k) {\n            return k * k * k;\n        },\n        Out: function(k) {\n            return --k * k * k + 1;\n        },\n        InOut: function(k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k + 2);\n        }\n    },\n    Quartic: {\n        In: function(k) {\n            return k * k * k * k;\n        },\n        Out: function(k) {\n            return 1 - --k * k * k * k;\n        },\n        InOut: function(k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k;\n            }\n            return -0.5 * ((k -= 2) * k * k * k - 2);\n        }\n    },\n    Quintic: {\n        In: function(k) {\n            return k * k * k * k * k;\n        },\n        Out: function(k) {\n            return --k * k * k * k * k + 1;\n        },\n        InOut: function(k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k * k * k + 2);\n        }\n    },\n    Sinusoidal: {\n        In: function(k) {\n            return 1 - Math.cos(k * Math.PI / 2);\n        },\n        Out: function(k) {\n            return Math.sin(k * Math.PI / 2);\n        },\n        InOut: function(k) {\n            return 0.5 * (1 - Math.cos(Math.PI * k));\n        }\n    },\n    Exponential: {\n        In: function(k) {\n            return k === 0 ? 0 : Math.pow(1024, k - 1);\n        },\n        Out: function(k) {\n            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n        },\n        InOut: function(k) {\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if ((k *= 2) < 1) {\n                return 0.5 * Math.pow(1024, k - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n        }\n    },\n    Circular: {\n        In: function(k) {\n            return 1 - Math.sqrt(1 - k * k);\n        },\n        Out: function(k) {\n            return Math.sqrt(1 - --k * k);\n        },\n        InOut: function(k) {\n            if ((k *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - k * k) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n        }\n    },\n    Elastic: {\n        In: function(k) {\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n        },\n        Out: function(k) {\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\n        },\n        InOut: function(k) {\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            k *= 2;\n            if (k < 1) {\n                return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n            }\n            return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\n        }\n    },\n    Back: {\n        In: function(k) {\n            var s = 1.70158;\n            return k * k * ((s + 1) * k - s);\n        },\n        Out: function(k) {\n            var s = 1.70158;\n            return --k * k * ((s + 1) * k + s) + 1;\n        },\n        InOut: function(k) {\n            var s = 1.70158 * 1.525;\n            if ((k *= 2) < 1) {\n                return 0.5 * (k * k * ((s + 1) * k - s));\n            }\n            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n        }\n    },\n    Bounce: {\n        In: function(k) {\n            return 1 - TWEEN.Easing.Bounce.Out(1 - k);\n        },\n        Out: function(k) {\n            if (k < 1 / 2.75) {\n                return 7.5625 * k * k;\n            } else if (k < 2 / 2.75) {\n                return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;\n            } else if (k < 2.5 / 2.75) {\n                return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;\n            } else {\n                return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;\n            }\n        },\n        InOut: function(k) {\n            if (k < 0.5) {\n                return TWEEN.Easing.Bounce.In(k * 2) * 0.5;\n            }\n            return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n        }\n    }\n};\nTWEEN.Interpolation = {\n    Linear: function(v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = TWEEN.Interpolation.Utils.Linear;\n        if (k < 0) {\n            return fn(v[0], v[1], f);\n        }\n        if (k > 1) {\n            return fn(v[m], v[m - 1], m - f);\n        }\n        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n    },\n    Bezier: function(v, k) {\n        var b = 0;\n        var n = v.length - 1;\n        var pw = Math.pow;\n        var bn = TWEEN.Interpolation.Utils.Bernstein;\n        for(var i = 0; i <= n; i++){\n            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n        }\n        return b;\n    },\n    CatmullRom: function(v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = TWEEN.Interpolation.Utils.CatmullRom;\n        if (v[0] === v[m]) {\n            if (k < 0) {\n                i = Math.floor(f = m * (1 + k));\n            }\n            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n        } else {\n            if (k < 0) {\n                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n            }\n            if (k > 1) {\n                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n            }\n            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n        }\n    },\n    Utils: {\n        Linear: function(p0, p1, t) {\n            return (p1 - p0) * t + p0;\n        },\n        Bernstein: function(n, i) {\n            var fc = TWEEN.Interpolation.Utils.Factorial;\n            return fc(n) / fc(i) / fc(n - i);\n        },\n        Factorial: function() {\n            var a = [\n                1\n            ];\n            return function(n) {\n                var s = 1;\n                if (a[n]) {\n                    return a[n];\n                }\n                for(var i = n; i > 1; i--){\n                    s *= i;\n                }\n                a[n] = s;\n                return s;\n            };\n        }(),\n        CatmullRom: function(p0, p1, p2, p3, t) {\n            var v0 = (p2 - p0) * 0.5;\n            var v1 = (p3 - p1) * 0.5;\n            var t2 = t * t;\n            var t3 = t * t2;\n            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n        }\n    }\n};\n// UMD (Universal Module Definition)\n(function(root) {\n    if (true) {\n        // AMD\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return TWEEN;\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tween.js/src/Tween.js\n");

/***/ })

};
;